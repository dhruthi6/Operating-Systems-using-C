#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <dirent.h>
#include <sys/stat.h>
int main()
 {
  pid_t pid = fork(); // Create a child process
  if (pid < 0) 
  {
   perror("Fork failed");
   exit(EXIT_FAILURE);
  }
  if (pid == 0)
  {
   // Child process
   printf("Child Process: PID = %d\n", getpid());
       // Execute "ls -l" using execvp
   char *args[] = {"ls", "-l", NULL};
   execvp(args[0], args);
   perror("Exec failed");
   exit(EXIT_FAILURE);
  }
  else
  { 
        // Parent process
   printf("Parent Process: PID = %d, waiting for child...\n", getpid());
     // Wait for the child process to finish
   wait(NULL);
   printf("Child process completed.\n");
        // Open and read the current directory
   DIR *dir = opendir(".");
   if (!dir)
   {
    perror("Failed to open directory");
    exit(EXIT_FAILURE);
   }
   printf("Files in the current directory:\n");
   struct dirent *entry;
   while ((entry = readdir(dir)) != NULL)
   {
    printf("%s\n", entry->d_name);
   }
   closedir(dir); // Close the directory
  }
  return 0;
 }
